<?php

namespace ContainerHVcCBbH;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUploadControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'App\Controller\UploadController' shared autowired service.
     *
     * @return \App\Controller\UploadController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/AbstractController.php';
        include_once \dirname(__DIR__, 4).'/src/Controller/UploadController.php';
        include_once \dirname(__DIR__, 4).'/src/Service/DebrickedApiService.php';
        include_once \dirname(__DIR__, 4).'/src/Service/RuleEngine.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/MailerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Mailer.php';

        $container->services['App\\Controller\\UploadController'] = $instance = new \App\Controller\UploadController(new \App\Service\DebrickedApiService(($container->privates['http_client'] ?? $container->load('getHttpClientService')), ($container->services['doctrine.orm.default_entity_manager'] ?? $container->load('getDoctrine_Orm_DefaultEntityManagerService')), $container->getEnv('DEBRICKED_API_URL'), $container->getEnv('DEBRICKED_LOGIN_USER'), $container->getEnv('DEBRICKED_LOGIN_PWD'), $container->getEnv('DEBRICKED_LOGIN_URL'), ($container->privates['parameter_bag'] ?? ($container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container))), new \App\Service\RuleEngine(new \Symfony\Component\Mailer\Mailer(($container->privates['mailer.transports'] ?? $container->load('getMailer_TransportsService')), ($container->services['messenger.default_bus'] ?? $container->load('getMessenger_DefaultBusService')), ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService())))));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
        ], [
            'http_kernel' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
        ]))->withContext('App\\Controller\\UploadController', $container));

        return $instance;
    }
}
